x1 <- 0:100 #vector
x2 <- x1 * 2 * pi/100 #another vector
y1 <- sin(x2) # use function to generate vector
plot(x2, y1, type="l")
abline(h=0, lwd=2)
abline(v=(0:4)/2*pi, lty=3, col="gray")
y2 <- cos(x2)
marks <-c(10, 6, 4, 7, 8)
lines(x2, y2, lty=2, col="green")
a<-c(1,2,3,4)
b<-c("one","two","three","four")
c<-c(TRUE, TRUE, FALSE)
a[1]
attributes(vector)
attributes(a)
?attributes
a <- list(1,2,"a",TRUE)
length(a)
a[1]
a[-1]
a[0]
a[10]
b <- list(list(list()))#list can be recursive
is.recursive(b)
is.recursive(a)
is.recursive(c)
attributes(b)
attributes(c)
attr(a)
attr(b,c)
d<-c(a=1,b=2,c=3)
names(d)
names(d);d[1]
names(d);d[1];d[a]
names(d);d[1];d["a"]
a <- factor("x","y","y","x")
a
a <- factor(c("x","y","y","x"))
a
levels(a)
class(a)
table(a)
?cat
cat("x=",x,"\n")
x<-1:100
cat("x=",x,"\n")
cat("x=",x,"\n",file="1.txt",append = 1)
y<list(x)
y<-list(x)
save(x, y, file="x-y.RData")
load("x-y.RData")
rm(list=ls())
load("x-y.RData")
sink("allres.txt", split=TRUE)
x1 <- rnorm(30, 10, 2)
summary(x1)
hist(x1)
boxplot(x1)
qqnorm(x1); qqline(x1)
x2 <-exp(rnorm(30,0,1))
hist(x);locator(1)
hist(x2);locator(1)
x1 <- rnorm(30, 10, 2)
summary(x1)
hist(x1)
boxplot(x1)
qqnorm(x1); qqline(x1)
x2 <-exp(rnorm(30,0,1))
hist(x2); locator(1)
y <- log(x)
hist(y)
y <- log(x2)
hist(y)
x3 <- rnorm(30,10,3)^2
hist(x);locator(x)
hist(x3);locator(x3)
?locator
hist(y)
hist(y);locator(y)
library(MASS)
boxcox(x3~l)
?boxcox
boxcox(x3~1)
boxcox(x2~1)
boxcox(x2~1)
boxcox(x3~1)
boxcox(x1~1)
boxcox(x1~0)
boxcox(x1)
?boxcox
??boxcox
boxcox(x3~1)
boxcox(x2~1)
boxcox(x1~1)
objf <- function(theta, x){
mu <- theta[1]
s2 <- exp(theta[2])
n <- length(x)
res <- n*log(s2) + 1/s2*sum((x - mu)^2)
res
}
?optim
sim <- function(n=30){
mu0 <- 20
sigma0 <- 2
x <- rnorm(n, mu0, sigma0)
theta0 <- c(0,0)
ores <- optim(theta0, objf, x=x)
print(ores)
theta <- ores$par
mu <- theta[1]
sigma <- exp(0.5*theta[2])
cat("mu: ", mu, " ==> ", mu0, "\n")
cat("sigma: ", sigma, " ==> ", sigma0, "\n")
}
View(sim)
x <- c(11.67, 9.29, 10.45, 9.01, 12.67,16.24, 11.64, 7.73, 12.23)
t.test(x)
?t.test
prop.test(30,100)
rm(x)
x4 <- c(11.67, 9.29, 10.45, 9.01, 12.67,16.24, 11.64, 7.73, 12.23)
prop.test(30,100)
x5 <- prop.test(30,100)
x6 <- c(20.5, 19.8, 19.7, 20.4, 20.1, 20.0, 19.0, 19.9)
x7 <- c(20.7, 19.8, 19.5, 20.8, 20.4, 19.6, 20.2)
t.test(x6, x7)
var.test(x6, x7)
hist(x7), locator(1)
hist(x7);locator(1)
hist(x4);locator(1)
qqnorm(x4);qqline(x4)
shapiro.test(x4)
x1 <- c(20.5, 19.8, 19.7, 20.4, 20.1, 20.0, 19.0, 19.9)
x2 <- c(20.7, 19.8, 19.5, 20.8, 20.4, 19.6, 20.2)
wilcox.test(x1, x2)
?wilcox.test
wilcox.text(x1, x2, paired=1)
wilcox.test(x1, x2, paired=1)
x2 <- c(20.7, 19.8, 19.5, 20.8, 20.4, 19.6, 20.2,20.3)
wilcox.test(x1, x2)
wilcox.test(x1, x2, paired=1)
wilcox.test(x1, x2, paired=TRUE)
?Wilcoxon
source('F:/code/R/0313/02.R')
x <- c(18, 13, 17, 21, 15, 16)
p <- rep(1/6, 6)
chisq.test(x, p)
chisq.test(x, p)
?chisq.test
chisq.test(x)
tab <- matrix(c(60, 3, 32, 11))
tab
tab <- matrix(c(60, 3, 32, 11),nrow=2, ncol=2)
tab
chisq.test(test)
x1 <- c(20.5, 19.8, 19.7, 20.4, 20.1, 20.0, 19.0, 19.9)
x2 <- c(20.7, 19.8, 19.5, 20.8, 20.4, 19.6, 20.2,20.3)
wilcox.test(x1, x2)
library(haven)
cfps2014child_20161230 <- read_dta("F:/data/CFPS/cfps2014child_20161230.dta")
View(cfps2014child_20161230)
View(cfps2014child_20161230)
library(haven)
cfps2014famecon_20161230 <- read_dta("F:/data/CFPS/cfps2014famecon_20161230.dta")
View(cfps2014famecon_20161230)
View(cfps2014famecon_20161230)
rm(list=ls())
library(haven)
cfps2014comm_20161230 <- read_dta("F:/data/CFPS/cfps2014comm_20161230.dta")
View(cfps2014comm_20161230)
View(cfps2014comm_20161230)
data(galtoon)
data(galton)
getwd()
galton = read.csv("F:\\data\\Galton.csv")
summary(galton)
p=ggplot(aes(x="Height",y="Father"),data=galton)
p+geom_point()
attach(galton)
galton$Gender <- factor(Gender)
galton$Family <- factor(Family)
reg1 <- lm(Height~Father+Mother+Gender) #Height = a + b_1*Father + b_2*Mother+ b_3*Gender+residual
summary(reg1)
reg1$coefficients
standresid=rstandard(reg1)
par(mfrow=c(1,3))
plot(standresid~Father)
plot(standresid~Mother)
plot(standresid~Gender)
par(mfrow=c(1,1))
n <- dim(galton)[1]
index=seq(1:n)
plot(standresid~index, main="Check for Independence of Errors")
qqPlot(reg1)
??qqPlot
library(car)
qqPlot(reg1)
dfbetaPlots(reg1)
h <- predict(reg1)
plot(h,Height)
getwd()
setwd("F:\\code\\")
library(haven)
csdps <- read_dta("F:/data/CSDPS.dta", encoding="UTF-8")
head(csdps)
require(dplyr)
d1 <- filter(csdps, ! is.na(csdps$i7)) #remove observations if i7 is missing
d1 <- filter(d1, ! is.na(d1$h1)) #remove observations if h1 is missing
d1 <- filter(d1, ! is.na(d1$h2)) #remove observations if h2 is missing
d1 <- filter(d1, ! is.na(d1$a23)) #remove observations if a23 is missing
attach(d1)
i7_f <- factor(i7, ordered=TRUE) #change i7 into an ordered factor variable
table(i7_f);
require(ggplot2)
ggplot(data=d1, aes(x=h1))+geom_histogram()+
labs(title="Distribution of Degree of Satisfaction with Development",x="Degree of Satisfaction")
summary(h1)
table(i7)
ggplot(data=d1, aes(x=h1))+geom_histogram()+
labs(title="Distribution of Degree of Satisfaction with Development",x="Degree of Satisfaction")
tapply(h1, i7, mean)
tapply(h1, i7, sd)
aov1 <- aov(h1~ i7_f)
summary(aov1)
standresid <- rstandard(aov1)
aov1_d <- data.frame(standresid, aov1$fitted)
ggplot(data=aov1_d,aes(y=standresid, x=aov1.fitted))+geom_point()+
labs(title="Check for Constant Error Variance")
plot(standresid~aov1$fitted, main="check for constant error variance")
n=dim(d1)[1]
index=seq(1:n)
aov1_d <- data.frame(aov1_d, index)
ggplot(data=aov1_d, aes(y=standresid, x=index))+geom_point()+
labs(title="Check for Independence of Errors")
plot(standresid~index, main="Check for Independence of Errors")
require(car)
qqPlot(aov1, main="QQPlot")
gg_qq(aov1$residuals)
gg_qq(aov1_d$standresid)
dffits = dffits(aov1)
dfbetas = dfbetas(aov1)
cooks = cooks.distance(aov1)
cbind(dffits, dfbetas, cooks) # get the output here
dfbetaPlots(aov1)
par(mfrow=c(1,2))
plot(dffits~index)
plot(aov1, which=c(4))
pairwise.t.test(h1, i7_f, p.adj="none")
pairwise.t.test(h1, i7_f, p.adj="bonf")
TukeyHSD(aov1)
plot(TukeyHSD(aov1))
pairwise.t.test(h1, i7_f, p.adj="none")
par(mfrow=c(1,1))
plot(TukeyHSD(aov1))
summary(b404)
hist(b404)
table(b404)
aov2<- aov(b404~i7_f)
summary(aov2)
corr(i7,b404)
cor(i7, b404)
summary(cars)
detach()
summmary(csdps$d1)
summary(csdps$d1)
table(csdps$d1)
table(d101a)
table(i7)
detach()
table(i7)
?detach
?attach
detach(d1)
table(i7)
table(csdps$i2)
tabulate(csdps$i2, csdps$i7)
tapply(csdps$iy, csdps$i2, mean)
tapply(csdps$i7, csdps$i2, mean)
tapply(csdps$i6, csdps$i2, mean)
tabulate(csdps$a1, csdps$a10)
tabulate(csdps$a1, csdps$a18)
table(csdps$a1, csdps$a18)
summary(csdps$d11)
is.na(csdps$d11)
is.na(csdps$d11a)
is.na(csdps$d11b)
summary(csdps$d11a)
par(mfrow=c(1,2))
hist(csdps$d11a);hist(csdps$d11b)
summary(csdps$e1)
table(csdps$e1)
table(csdps$e1, csdpe$i7)
table(csdps$e1, csdps$i7)
rm(list=ls())
getwd()
setwd("F:\\code\\R\\")
sink(file="note2.txt")
library(haven)
csdps <- read_dta("F:/data/CSDPS.dta", encoding="UTF-8")
head(csdps)
require(dplyr)
d1 <- filter(csdps, ! is.na(csdps$i7)) #remove observations if i7 is missing
d1 <- filter(d1, ! is.na(d1$h1)) #remove observations if h1 is missing
d1 <- filter(d1, ! is.na(d1$h2)) #remove observations if h2 is missing
d1 <- filter(d1, ! is.na(d1$a23)) #remove observations if a23 is missing
attach(d1)
i7_f <- factor(i7, ordered=TRUE) #change i7 into an ordered factor variable
table(i7_f);
require(ggplot2)
ggplot(data=d1, aes(x=h1))+geom_histogram()+
labs(title="Distribution of Degree of Satisfaction with Development",x="Degree of Satisfaction")
summary(h1)
table(i7)
ggplot(data=d1, aes(x=h1))+geom_histogram()+
labs(title="Distribution of Degree of Satisfaction with Development",x="Degree of Satisfaction")
tapply(h1, i7, mean)
tapply(h1, i7, sd)
aov1 <- aov(h1~ i7_f)
summary(aov1)
standresid <- rstandard(aov1)
aov1_d <- data.frame(standresid, aov1$fitted)
ggplot(data=aov1_d,aes(y=standresid, x=aov1.fitted))+geom_point()+
labs(title="Check for Constant Error Variance")
n=dim(d1)[1]
plot(standresid~aov1$fitted, main="check for constant error variance")
index=seq(1:n)
aov1_d <- data.frame(aov1_d, index)
ggplot(data=aov1_d, aes(y=standresid, x=index))+geom_point()+
labs(title="Check for Independence of Errors")
plot(standresid~index, main="Check for Independence of Errors")
require(car)
qqPlot(aov1, main="QQPlot")
gg_qq(aov1$residuals) #需要先运行appendix中的自定义函数
gg_qq(aov1_d$standresid)
dffits = dffits(aov1)
dfbetas = dfbetas(aov1)
cooks = cooks.distance(aov1)
cbind(dffits, dfbetas, cooks) # get the output here
dfbetaPlots(aov1)
par(mfrow=c(1,2))
plot(dffits~index)
plot(aov1, which=c(4))
par(mfrow=c(1,1))
pairwise.t.test(h1, i7_f, p.adj="none")
pairwise.t.test(h1, i7_f, p.adj="bonf")
TukeyHSD(aov1)
plot(TukeyHSD(aov1))
detach(d1)
sink()
rm(list=ls())
getwd()
setwd("F:\\code\\R\\")
library(haven)
csdps <- read_dta("F:/data/CSDPS.dta", encoding="UTF-8")
head(csdps)
getwd()
setwd("F:\\code\\R\\")
sink(file="note2.txt")
require(dplyr)
d1 <- filter(csdps, ! is.na(csdps$i7)) #remove observations if i7 is missing
d1 <- filter(d1, ! is.na(d1$h1)) #remove observations if h1 is missing
d1 <- filter(d1, ! is.na(d1$h2)) #remove observations if h2 is missing
d1 <- filter(d1, ! is.na(d1$a23)) #remove observations if a23 is missing
attach(d1)
i7_f <- factor(i7, ordered=TRUE) #change i7 into an ordered factor variable
table(i7_f);
require(ggplot2)
ggplot(data=d1, aes(x=h1))+geom_histogram()+
labs(title="Distribution of Degree of Satisfaction with Development",x="Degree of Satisfaction")
summary(h1)
table(i7)
hist(h1)
table(i7)
ggplot(data=d1, aes(x=h1))+geom_histogram()+
labs(title="Distribution of Degree of Satisfaction with Development",x="Degree of Satisfaction")
tapply(h1, i7, mean)
tapply(h1, i7, sd)
aov1 <- aov(h1~ i7_f)
summary(aov1)
standresid <- rstandard(aov1)
aov1_d <- data.frame(standresid, aov1$fitted)
ggplot(data=aov1_d,aes(y=standresid, x=aov1.fitted))+geom_point()+
labs(title="Check for Constant Error Variance")
plot(standresid~aov1$fitted, main="check for constant error variance")
n=dim(d1)[1]
index=seq(1:n)
aov1_d <- data.frame(aov1_d, index)
ggplot(data=aov1_d, aes(y=standresid, x=index))+geom_point()+
labs(title="Check for Independence of Errors")
plot(standresid~index, main="Check for Independence of Errors")
require(car)
qqPlot(aov1, main="QQPlot")
gg_qq(aov1$residuals) #需要先运行appendix中的自定义函数
gg_qq(aov1_d$standresid)
if(!is.null(labels)){
df$label <- ifelse(df$ord.x > df$upper | df$ord.x < df$lower, labels[ord],"")
}
gg_qq <- function(x, distribution = "norm", ..., line.estimate = NULL, conf = 0.95,
labels = names(x)){
q.function <- eval(parse(text = paste0("q", distribution)))
d.function <- eval(parse(text = paste0("d", distribution)))
x <- na.omit(x)
ord <- order(x)
n <- length(x)
P <- ppoints(length(x))
df <- data.frame(ord.x = x[ord], z = q.function(P, ...))
if(is.null(line.estimate)){
Q.x <- quantile(df$ord.x, c(0.25, 0.75))
Q.z <- q.function(c(0.25, 0.75), ...)
b <- diff(Q.x)/diff(Q.z)
coef <- c(Q.x[1] - b * Q.z[1], b)
} else {
coef <- coef(line.estimate(ord.x ~ z))
}
zz <- qnorm(1 - (1 - conf)/2)
SE <- (coef[2]/d.function(df$z)) * sqrt(P * (1 - P)/n)
fit.value <- coef[1] + coef[2] * df$z
df$upper <- fit.value + zz * SE
df$lower <- fit.value - zz * SE
if(!is.null(labels)){
df$label <- ifelse(df$ord.x > df$upper | df$ord.x < df$lower, labels[ord],"")
}
p <- ggplot(df, aes(x=z, y=ord.x)) +
geom_point() +
geom_abline(intercept = coef[1], slope = coef[2]) +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha=0.2)
if(!is.null(labels)) p <- p + geom_text( aes(label = label))
print(p)
coef
}
gg_qq(aov1_d$standresid)
gg_qq(aov1$residuals) #需要先运行appendix中的自定义函数
gg_qq(aov1_d$standresid)
dffits = dffits(aov1)
dfbetas = dfbetas(aov1)
cooks = cooks.distance(aov1)
cbind(dffits, dfbetas, cooks) # get the output here
dfbetaPlots(aov1)
par(mfrow=c(1,2))
plot(dffits~index)
plot(aov1, which=c(4))
par(mfrow=c(1,1))
pairwise.t.test(h1, i7_f, p.adj="none")
pairwise.t.test(h1, i7_f, p.adj="bonf")
TukeyHSD(aov1)
plot(TukeyHSD(aov1))
detach(d1)
sink()
