sigma <- exp(0.5*theta[2])
cat("mu: ", mu, " ==> ", mu0, "\n")
cat("sigma: ", sigma, " ==> ", sigma0, "\n")
}
View(sim)
x <- c(11.67, 9.29, 10.45, 9.01, 12.67,16.24, 11.64, 7.73, 12.23)
t.test(x)
?t.test
prop.test(30,100)
rm(x)
x4 <- c(11.67, 9.29, 10.45, 9.01, 12.67,16.24, 11.64, 7.73, 12.23)
prop.test(30,100)
x5 <- prop.test(30,100)
x6 <- c(20.5, 19.8, 19.7, 20.4, 20.1, 20.0, 19.0, 19.9)
x7 <- c(20.7, 19.8, 19.5, 20.8, 20.4, 19.6, 20.2)
t.test(x6, x7)
var.test(x6, x7)
hist(x7), locator(1)
hist(x7);locator(1)
hist(x4);locator(1)
qqnorm(x4);qqline(x4)
shapiro.test(x4)
x1 <- c(20.5, 19.8, 19.7, 20.4, 20.1, 20.0, 19.0, 19.9)
x2 <- c(20.7, 19.8, 19.5, 20.8, 20.4, 19.6, 20.2)
wilcox.test(x1, x2)
?wilcox.test
wilcox.text(x1, x2, paired=1)
wilcox.test(x1, x2, paired=1)
x2 <- c(20.7, 19.8, 19.5, 20.8, 20.4, 19.6, 20.2,20.3)
wilcox.test(x1, x2)
wilcox.test(x1, x2, paired=1)
wilcox.test(x1, x2, paired=TRUE)
?Wilcoxon
source('F:/code/R/0313/02.R')
x <- c(18, 13, 17, 21, 15, 16)
p <- rep(1/6, 6)
chisq.test(x, p)
chisq.test(x, p)
?chisq.test
chisq.test(x)
tab <- matrix(c(60, 3, 32, 11))
tab
tab <- matrix(c(60, 3, 32, 11),nrow=2, ncol=2)
tab
chisq.test(test)
x1 <- c(20.5, 19.8, 19.7, 20.4, 20.1, 20.0, 19.0, 19.9)
x2 <- c(20.7, 19.8, 19.5, 20.8, 20.4, 19.6, 20.2,20.3)
wilcox.test(x1, x2)
library(haven)
cfps2014child_20161230 <- read_dta("F:/data/CFPS/cfps2014child_20161230.dta")
View(cfps2014child_20161230)
View(cfps2014child_20161230)
library(haven)
cfps2014famecon_20161230 <- read_dta("F:/data/CFPS/cfps2014famecon_20161230.dta")
View(cfps2014famecon_20161230)
View(cfps2014famecon_20161230)
rm(list=ls())
library(haven)
cfps2014comm_20161230 <- read_dta("F:/data/CFPS/cfps2014comm_20161230.dta")
View(cfps2014comm_20161230)
View(cfps2014comm_20161230)
data(galtoon)
data(galton)
getwd()
galton = read.csv("F:\\data\\Galton.csv")
summary(galton)
p=ggplot(aes(x="Height",y="Father"),data=galton)
p+geom_point()
attach(galton)
galton$Gender <- factor(Gender)
galton$Family <- factor(Family)
reg1 <- lm(Height~Father+Mother+Gender) #Height = a + b_1*Father + b_2*Mother+ b_3*Gender+residual
summary(reg1)
reg1$coefficients
standresid=rstandard(reg1)
par(mfrow=c(1,3))
plot(standresid~Father)
plot(standresid~Mother)
plot(standresid~Gender)
par(mfrow=c(1,1))
n <- dim(galton)[1]
index=seq(1:n)
plot(standresid~index, main="Check for Independence of Errors")
qqPlot(reg1)
??qqPlot
library(car)
qqPlot(reg1)
dfbetaPlots(reg1)
h <- predict(reg1)
plot(h,Height)
getwd()
setwd("F:\\code\\")
library(haven)
csdps <- read_dta("F:/data/CSDPS.dta", encoding="UTF-8")
head(csdps)
require(dplyr)
d1 <- filter(csdps, ! is.na(csdps$i7)) #remove observations if i7 is missing
d1 <- filter(d1, ! is.na(d1$h1)) #remove observations if h1 is missing
d1 <- filter(d1, ! is.na(d1$h2)) #remove observations if h2 is missing
d1 <- filter(d1, ! is.na(d1$a23)) #remove observations if a23 is missing
attach(d1)
i7_f <- factor(i7, ordered=TRUE) #change i7 into an ordered factor variable
table(i7_f);
require(ggplot2)
ggplot(data=d1, aes(x=h1))+geom_histogram()+
labs(title="Distribution of Degree of Satisfaction with Development",x="Degree of Satisfaction")
summary(h1)
table(i7)
ggplot(data=d1, aes(x=h1))+geom_histogram()+
labs(title="Distribution of Degree of Satisfaction with Development",x="Degree of Satisfaction")
tapply(h1, i7, mean)
tapply(h1, i7, sd)
aov1 <- aov(h1~ i7_f)
summary(aov1)
standresid <- rstandard(aov1)
aov1_d <- data.frame(standresid, aov1$fitted)
ggplot(data=aov1_d,aes(y=standresid, x=aov1.fitted))+geom_point()+
labs(title="Check for Constant Error Variance")
plot(standresid~aov1$fitted, main="check for constant error variance")
n=dim(d1)[1]
index=seq(1:n)
aov1_d <- data.frame(aov1_d, index)
ggplot(data=aov1_d, aes(y=standresid, x=index))+geom_point()+
labs(title="Check for Independence of Errors")
plot(standresid~index, main="Check for Independence of Errors")
require(car)
qqPlot(aov1, main="QQPlot")
gg_qq(aov1$residuals)
gg_qq(aov1_d$standresid)
dffits = dffits(aov1)
dfbetas = dfbetas(aov1)
cooks = cooks.distance(aov1)
cbind(dffits, dfbetas, cooks) # get the output here
dfbetaPlots(aov1)
par(mfrow=c(1,2))
plot(dffits~index)
plot(aov1, which=c(4))
pairwise.t.test(h1, i7_f, p.adj="none")
pairwise.t.test(h1, i7_f, p.adj="bonf")
TukeyHSD(aov1)
plot(TukeyHSD(aov1))
pairwise.t.test(h1, i7_f, p.adj="none")
par(mfrow=c(1,1))
plot(TukeyHSD(aov1))
summary(b404)
hist(b404)
table(b404)
aov2<- aov(b404~i7_f)
summary(aov2)
corr(i7,b404)
cor(i7, b404)
summary(cars)
detach()
summmary(csdps$d1)
summary(csdps$d1)
table(csdps$d1)
table(d101a)
table(i7)
detach()
table(i7)
?detach
?attach
detach(d1)
table(i7)
table(csdps$i2)
tabulate(csdps$i2, csdps$i7)
tapply(csdps$iy, csdps$i2, mean)
tapply(csdps$i7, csdps$i2, mean)
tapply(csdps$i6, csdps$i2, mean)
tabulate(csdps$a1, csdps$a10)
tabulate(csdps$a1, csdps$a18)
table(csdps$a1, csdps$a18)
summary(csdps$d11)
is.na(csdps$d11)
is.na(csdps$d11a)
is.na(csdps$d11b)
summary(csdps$d11a)
par(mfrow=c(1,2))
hist(csdps$d11a);hist(csdps$d11b)
summary(csdps$e1)
table(csdps$e1)
table(csdps$e1, csdpe$i7)
table(csdps$e1, csdps$i7)
rm(list=ls())
getwd()
setwd("F:\\code\\R\\")
sink(file="note2.txt")
library(haven)
csdps <- read_dta("F:/data/CSDPS.dta", encoding="UTF-8")
head(csdps)
require(dplyr)
d1 <- filter(csdps, ! is.na(csdps$i7)) #remove observations if i7 is missing
d1 <- filter(d1, ! is.na(d1$h1)) #remove observations if h1 is missing
d1 <- filter(d1, ! is.na(d1$h2)) #remove observations if h2 is missing
d1 <- filter(d1, ! is.na(d1$a23)) #remove observations if a23 is missing
attach(d1)
i7_f <- factor(i7, ordered=TRUE) #change i7 into an ordered factor variable
table(i7_f);
require(ggplot2)
ggplot(data=d1, aes(x=h1))+geom_histogram()+
labs(title="Distribution of Degree of Satisfaction with Development",x="Degree of Satisfaction")
summary(h1)
table(i7)
ggplot(data=d1, aes(x=h1))+geom_histogram()+
labs(title="Distribution of Degree of Satisfaction with Development",x="Degree of Satisfaction")
tapply(h1, i7, mean)
tapply(h1, i7, sd)
aov1 <- aov(h1~ i7_f)
summary(aov1)
standresid <- rstandard(aov1)
aov1_d <- data.frame(standresid, aov1$fitted)
ggplot(data=aov1_d,aes(y=standresid, x=aov1.fitted))+geom_point()+
labs(title="Check for Constant Error Variance")
n=dim(d1)[1]
plot(standresid~aov1$fitted, main="check for constant error variance")
index=seq(1:n)
aov1_d <- data.frame(aov1_d, index)
ggplot(data=aov1_d, aes(y=standresid, x=index))+geom_point()+
labs(title="Check for Independence of Errors")
plot(standresid~index, main="Check for Independence of Errors")
require(car)
qqPlot(aov1, main="QQPlot")
gg_qq(aov1$residuals) #需要先运行appendix中的自定义函数
gg_qq(aov1_d$standresid)
dffits = dffits(aov1)
dfbetas = dfbetas(aov1)
cooks = cooks.distance(aov1)
cbind(dffits, dfbetas, cooks) # get the output here
dfbetaPlots(aov1)
par(mfrow=c(1,2))
plot(dffits~index)
plot(aov1, which=c(4))
par(mfrow=c(1,1))
pairwise.t.test(h1, i7_f, p.adj="none")
pairwise.t.test(h1, i7_f, p.adj="bonf")
TukeyHSD(aov1)
plot(TukeyHSD(aov1))
detach(d1)
sink()
rm(list=ls())
getwd()
setwd("F:\\code\\R\\")
library(haven)
csdps <- read_dta("F:/data/CSDPS.dta", encoding="UTF-8")
head(csdps)
getwd()
setwd("F:\\code\\R\\")
sink(file="note2.txt")
require(dplyr)
d1 <- filter(csdps, ! is.na(csdps$i7)) #remove observations if i7 is missing
d1 <- filter(d1, ! is.na(d1$h1)) #remove observations if h1 is missing
d1 <- filter(d1, ! is.na(d1$h2)) #remove observations if h2 is missing
d1 <- filter(d1, ! is.na(d1$a23)) #remove observations if a23 is missing
attach(d1)
i7_f <- factor(i7, ordered=TRUE) #change i7 into an ordered factor variable
table(i7_f);
require(ggplot2)
ggplot(data=d1, aes(x=h1))+geom_histogram()+
labs(title="Distribution of Degree of Satisfaction with Development",x="Degree of Satisfaction")
summary(h1)
table(i7)
hist(h1)
table(i7)
ggplot(data=d1, aes(x=h1))+geom_histogram()+
labs(title="Distribution of Degree of Satisfaction with Development",x="Degree of Satisfaction")
tapply(h1, i7, mean)
tapply(h1, i7, sd)
aov1 <- aov(h1~ i7_f)
summary(aov1)
standresid <- rstandard(aov1)
aov1_d <- data.frame(standresid, aov1$fitted)
ggplot(data=aov1_d,aes(y=standresid, x=aov1.fitted))+geom_point()+
labs(title="Check for Constant Error Variance")
plot(standresid~aov1$fitted, main="check for constant error variance")
n=dim(d1)[1]
index=seq(1:n)
aov1_d <- data.frame(aov1_d, index)
ggplot(data=aov1_d, aes(y=standresid, x=index))+geom_point()+
labs(title="Check for Independence of Errors")
plot(standresid~index, main="Check for Independence of Errors")
require(car)
qqPlot(aov1, main="QQPlot")
gg_qq(aov1$residuals) #需要先运行appendix中的自定义函数
gg_qq(aov1_d$standresid)
if(!is.null(labels)){
df$label <- ifelse(df$ord.x > df$upper | df$ord.x < df$lower, labels[ord],"")
}
gg_qq <- function(x, distribution = "norm", ..., line.estimate = NULL, conf = 0.95,
labels = names(x)){
q.function <- eval(parse(text = paste0("q", distribution)))
d.function <- eval(parse(text = paste0("d", distribution)))
x <- na.omit(x)
ord <- order(x)
n <- length(x)
P <- ppoints(length(x))
df <- data.frame(ord.x = x[ord], z = q.function(P, ...))
if(is.null(line.estimate)){
Q.x <- quantile(df$ord.x, c(0.25, 0.75))
Q.z <- q.function(c(0.25, 0.75), ...)
b <- diff(Q.x)/diff(Q.z)
coef <- c(Q.x[1] - b * Q.z[1], b)
} else {
coef <- coef(line.estimate(ord.x ~ z))
}
zz <- qnorm(1 - (1 - conf)/2)
SE <- (coef[2]/d.function(df$z)) * sqrt(P * (1 - P)/n)
fit.value <- coef[1] + coef[2] * df$z
df$upper <- fit.value + zz * SE
df$lower <- fit.value - zz * SE
if(!is.null(labels)){
df$label <- ifelse(df$ord.x > df$upper | df$ord.x < df$lower, labels[ord],"")
}
p <- ggplot(df, aes(x=z, y=ord.x)) +
geom_point() +
geom_abline(intercept = coef[1], slope = coef[2]) +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha=0.2)
if(!is.null(labels)) p <- p + geom_text( aes(label = label))
print(p)
coef
}
gg_qq(aov1_d$standresid)
gg_qq(aov1$residuals) #需要先运行appendix中的自定义函数
gg_qq(aov1_d$standresid)
dffits = dffits(aov1)
dfbetas = dfbetas(aov1)
cooks = cooks.distance(aov1)
cbind(dffits, dfbetas, cooks) # get the output here
dfbetaPlots(aov1)
par(mfrow=c(1,2))
plot(dffits~index)
plot(aov1, which=c(4))
par(mfrow=c(1,1))
pairwise.t.test(h1, i7_f, p.adj="none")
pairwise.t.test(h1, i7_f, p.adj="bonf")
TukeyHSD(aov1)
plot(TukeyHSD(aov1))
detach(d1)
sink()
getwd()
getwd()
far = read.csv(""F:\\data\\FAR_Finidx.csv"")
far = read.csv("F:\\data\\FAR_Finidx.csv")
far = read.csv("F:\\data\\FAR_Finidx.csv")
far = read.table("F:\\data\\FAR_Finidx.csv")
far = read.table("F:\\data\\FAR_Finidx.csv")
far = read.table("F:\\data\\far.csv")
View(far)
far = read.table("F:\\data\\far.csv", seq=",")
far = read.table("F:\\data\\far.csv", sep=",")
names(far)
far = read.table("F:\\data\\far.csv", sep=",", header=TRUE)
names(far)
beta = read.table("F:\\data\\beta.csv")
names(beta)
beta = read.table("F:\\data\\beta.csv",seq=",", header=TRUE)
beta = read.table("F:\\data\\beta.csv",sep=",", header=TRUE)
names(beta)
summary(far$Accper)
typeof(far$Accper)
year = as.Date(far$Accper,c("%y/%m/%d, %y"))
summary(year)
rm(year)
year = as.Date(far$Accper,"%y/%m/%d")
summary(year)
year = as.Date(far$Accper,"%Y/%m/%d")
summary(year)
table(year)
year = year(year)
year = years(year)
year = format(year, format="%y")
table(year)
far = year
far = read.table("F:\\data\\far.csv", sep=",", header=TRUE)
names(far)
far = year + far
far$year = as.Date(far$Accper,"%Y/%m/%d")
far$year = format(year, format="%y")
table(far$year)
rename(far, c("A100000"="asset"))
??rename
library(reshape)
library(reshape)
rename(far, c("A100000"="asset"))
names(far)
rename(far, c(A100000="asset", B110101="income", D100000="cashflow", T30100="alratio"))
names(far)
far1 <- rename(far, c(A100000="asset", B110101="income", D100000="cashflow", T30100="alratio"))
names(far)
names(far1)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
names(far1)
ggplot(data=far1, aes(x=Etaxrt)) + geom_histogram()
hist(far1$Etaxrt)
ggplot(data=far1, aes(x=Etaxrt)) + geom_histogram()
summary(far1$Etaxrt)
library(car)
install.packages("car")
library(car)
qqplot(far1$Etaxrt)
install.packages("Hmisc")
library(Hmisc)
install.packages(mice)
library("mice")
library(mice)
install.packages("mice")
library(mice)
boxplot(far1$Etaxrt)
ggplot(data=far1, aes(x=Etaxrt)) + geom_boxplot()
ggplot(data=far1, aes(group=Etaxrt)) + geom_boxplot()
boxplot(far1$Etaxrt)
sp_Etaxrt = boxplot(far1$Etaxrt)
sp_Etaxrt = boxplot(far1$Etaxrt, title="实际税率异常值检验")
sp_Etaxrt
boxplot(far1$Etaxrt, title="实际税率异常值检验")
sp_Etaxrt = boxplot(far1$Etaxrt, main="实际税率异常值检验")
sp_Etaxrt$out
?boxplot
sp_Etaxrt$out[976]
far1$Etaxrt[976]
far1$Etaxrt[975]
far1$Etaxrt[974]
outlier = boxplot.stats(far1$Etaxrt)$out
outlier
-17.815014 %in% far1$Etaxrt
test = (abs(far1$Etaxrt) > 1)
table(test)
test = (far1$Etaxrt < 0)
table(test)
test = (far1$Etaxrt < -1);table(test)
test = (far1$Etaxrt < -5);table(test)
test = (far1$Etaxrt > 10);table(test)
winsor1 <- function (x, fraction=.05)
{
if(length(fraction) != 1 || fraction < 0 ||
fraction > 0.5) {
stop("bad value for 'fraction'")
}
lim <- quantile(x, probs=c(fraction, 1-fraction))
x[ x < lim[1] ] <- lim[1]
x[ x > lim[2] ] <- lim[2]
x
}
winsor1(far1$Etaxrt, fraction=.05)
winsor1(far1$Etaxrt, fraction=.05)
rm(winsor1())
rm(winsor1)
winsor <- function (x, fraction=.05)
{
if(length(fraction) != 1 || fraction < 0 ||
fraction > 0.5) {
stop("bad value for 'fraction'")
}
lim <- quantile(x, probs=c(fraction, 1-fraction))
x[ x < lim[1] ] <- NA
x[ x > lim[2] ] <- NA
return x
}
winsor <- function (x, fraction=.05)
{
if(length(fraction) != 1 || fraction < 0 ||
fraction > 0.5) {
stop("bad value for 'fraction'")
}
lim <- quantile(x, probs=c(fraction, 1-fraction))
x[ x < lim[1] ] <- NA
x[ x > lim[2] ] <- NA
return x
}
if(length(fraction) != 1 || fraction < 0 || fraction > 0.5){
stop("bad value for 'fraction'")
}
winsor <- function (x, fraction=.05)
{
if(length(fraction) != 1 || fraction < 0 || fraction > 0.5){
stop("bad value for 'fraction'")
}
lim <- quantile(x, probs=c(fraction, 1-fraction))
x[ x < lim[1] ] <- NA
x[ x > lim[2] ] <- NA
return(x)
}
winsor1(far1$Etaxrt, fraction=.05)
winsor(far1$Etaxrt, fraction=.05)
quantiles(far1$Etaxrt)
quantile(far1$Etaxrt, probs=c(0.05, 0.95))
quantile(far1$Etaxrt, probs=c(0.05, 0.95), na.rm=TRUE)
winsor <- function (x, fraction=.05)
{
if(length(fraction) != 1 || fraction < 0 || fraction > 0.5){
stop("bad value for 'fraction'")
}
lim <- quantile(x, probs=c(fraction, 1-fraction), na.rm=TRUE)
x[ x < lim[1] ] <- NA
x[ x > lim[2] ] <- NA
return(x)
}
winsor(far1$Etaxrt, fraction=.005)
hist(far1$Etaxrt)
tax = winsor(far1$Etaxrt, fraction=.005)
hist(tax)
quantile(far1$Etaxrt, probs = c(0.005,0.095))
quantile(far1$Etaxrt, probs = c(0.005,0.095), na.rm=TRUE)
quantile(far1$Etaxrt, probs = c(0.005,0.995), na.rm=TRUE)
far1$Etaxrt <- winsor(far1$Etaxrt, fraction = 0.005)
ggplot(data=far1, aes(x=Etaxrt)) + geom_histogram()
ggplot(data=far1, aes(x=Etaxrt)) + geom_histogram() + labs(title="实际税率分布")
ggplot(data=far1, aes(x=Etaxrt)) + geom_histogram()
ggplot(data=far1, aes(x=Etaxrt)) + geom_histogram() + facet_grid(year)
ggplot(data=far1, aes(x=Etaxrt)) + geom_histogram() + facet_grid(year)
ggplot(data=far1, aes(x=Etaxrt)) + geom_histogram()
