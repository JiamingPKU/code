labs(x="资产负债率",y="数量",title="2015年")+facet_grid(tax~.)
ggplot(data=far15, aes(x=mr, fill=tax))+geom_density()+
labs(x="边际利润率",y="数量")+facet_grid(tax~.)
far15$mr <- winsor(far15$mr, fraction = 0.01)
ggplot(data=far15, aes(x=mr, fill=tax))+geom_density()+
labs(x="边际利润率",y="数量")+facet_grid(tax~.)
far15$mr <- winsor(far15$mr, fraction = 0.05)
ggplot(data=far15, aes(x=mr, fill=tax))+geom_density()+
labs(x="边际利润率",y="数量")+facet_grid(tax~.)
ggplot(data=far15, aes(x=pstk, fill=tax))+geom_density()+
labs(x="每股净资产",y="数量")+facet_grid(tax~.)
far15 <- rename(far15, c("A100000"="asset"))
far15$asset <- log(far15$asset)
hist(far15$asset)
ggplot(data=far15, aes(x=asset, fill=tax))+geom_density()+
labs(x="每股净资产",y="数量")+facet_grid(tax~.)
ggplot(data=far15, aes(x=Etaxrt, y=asset))+geom_point()
ggplot(data=far15, aes(x=Etaxrt, y=mr, color=tax))+geom_point()
ggplot(data=far15, aes(x=asset, y=mr, color=tax))+geom_point()
cor.test(far15$asset,far15$Etaxrt)
ggplot(data=far15, aes(x=asset))+geom_density()
ggplot(data=far15, aes(x=B110101 , y=mr, color=tax))+geom_point()
ggplot(data=far15, aes(x=B110101 , y=mr, color=tax))+geom_point()
ggplot(data=far15, aes(x=B110101 ))+geom_density()
ggplot(data=far15, aes(x=log(B110101) ))+geom_density()
anova(debt~tax)
attach(far15)
anova(debt~tax)
detach
detach()
ggplot(data=far15, aes(x=Nstaff, y=mr, color=tax))+geom_point()
ggplot(data=far15, aes(x=Nstaff, fill=tax))+geom_density()+
labs(x="总资产",y="数量")+facet_grid(tax~.)
ggplot(data=far15, aes(x=log(Nstaff), fill=tax))+geom_density()+
labs(x="总资产",y="数量")+facet_grid(tax~.)
ggplot(data=far15, aes(x=T60200 , fill=tax))+geom_density()+
labs(x="总资产",y="数量")+facet_grid(tax~.)
ggplot(data=far15, aes(x=log(T60200 ), fill=tax))+geom_density()+
labs(x="总资产",y="数量")+facet_grid(tax~.)
ggplot(data=far15, aes(x=log(T60200 ), fill=tax))+geom_density()+
labs(x="每股收益的对数",y="数量")+facet_grid(tax~.)
ggplot(data=far15, aes(x=log(T60200 ), fill=tax))+geom_density()+
labs(x="每股收益的对数",y="密度")+facet_grid(tax~.)
ggplot(data=far15, aes(x=log(T60200 ), fill=tax))+geom_density()+
labs(x="每股收益的对数",y="密度",title="2015年")+facet_grid(tax~.)
ggplot(data=far15, aes(x=T60200 ,y=debt))+geom_point()
ggplot(data=far15, aes(x=log(T60200) ,y=debt))+geom_point()
ggplot(data=far15, aes(x=log(T60200) ,y=log(debt))+geom_point()
##使用Winsorizing 方法
## source: r-bloggers-Winsorization
winsor <- function (x, fraction=.05)
{
if(length(fraction) != 1 || fraction < 0 || fraction > 0.5){
stop("bad value for 'fraction'")
}
lim <- quantile(x, probs=c(fraction, 1-fraction), na.rm=TRUE)
x[ x < lim[1] ] <- NA
x[ x > lim[2] ] <- NA
return(x)
}
ggplot(data=far15, aes(x=log(T60200) ,y=log(debt))+geom_point()
##使用Winsorizing 方法
## source: r-bloggers-Winsorization
winsor <- function (x, fraction=.05)
{
if(length(fraction) != 1 || fraction < 0 || fraction > 0.5){
stop("bad value for 'fraction'")
}
lim <- quantile(x, probs=c(fraction, 1-fraction), na.rm=TRUE)
x[ x < lim[1] ] <- NA
x[ x > lim[2] ] <- NA
return(x)
}
ggplot(data=far15, aes(x=log(T60200) ,y=log(debt)))+geom_point()
ggplot(data=far15, aes(x=log(T60200 ), fill=tax))+geom_density()+
labs(x="每股收益的对数",y="密度",title="2015年")+facet_grid(tax~.)
getwd()
library(readxl)
install.packages("readxl")
library(TSA)
install.packages("TSA")
install.packages("forecast")
require(c("readxl","TSA","forecast"))
require(c("readxl","TSA","forecast"),character.only = T)
x=c("readxl","TSA","forecast")
lapply(packages(all.available = TRUE), function(xx)
library(xx,     character.only = TRUE))
rm(list=ls())
lapply(x, require, character.only = T)
x=c("readxl","TSA","forecast")
lapply(x, require, character.only = T)
data <- read_excel("bloomberg.xlsx", sheet = "total", col_types = c("skip", "numeric", "numeric"))
dir
getwd()
data <- read_excel("0510\\bloomberg.xlsx", sheet = "total", col_types = c("skip", "numeric", "numeric"))
ast = data[1] # ast represents asset
ast = data[1] # ast represents asset
num = data[2] # num represents number
View(num)
ast = ts(ast, frequency = 12,start = 1995) # total net assets
num = ts(num, frequency = 12, start = 1995) # number of FOF funds
GR_ast = diff(log(ast)) # growth ratio of total net asset
GR_ast = ts(GR_ast, names = 'GR_ast')
GR_num = diff(log(num)) # growth ratio of number of FOF funds
GR_num = ts(GR_num, names = 'GR_num')
par(mfrow = c(2,2))
plot(ast)
plot(GR_ast)
plot(num)
plot(GR_num)
m_ast = auto.arima(ast) # ARIMA(0,2,2)
m_GR_ast = auto.arima(GR_ast) # ARIMA(0,1,1)
m_num = auto.arima(num) # ARIMA(0,2,1)(0,0,1)[12]
m_GR_num = auto.arima(GR_num) # ARIMA(1,1,1)
mm_ast = auto.arima(diff(ast, differences = 2)) # ARIMA(0,0,2) with zero mean
mm_GR_ast = auto.arima(diff(GR_ast, differences = 1)) # ARIMA(0,0,1) with zero mean
mm_num = auto.arima(diff(num, differences = 2)) # ARIMA(0,0,1)(0,0,1)[12] with zero mean
mm_GR_num = auto.arima(diff(GR_num, differences = 1)) # ARIMA(1,0,1) with zero mean
r_ast = mm_ast$residuals
r_GR_ast = mm_GR_ast$residuals
r_num = mm_num$residuals
r_GR_num = mm_GR_num$residuals
par(mfrow = c(2,2)) # plots of residuals
plot(r_ast)
plot(r_GR_ast)
plot(r_num)
plot(r_GR_num)
r1_ast = m_ast$residuals
r1_GR_ast = m_GR_ast$residuals
r1_num = m_num$residuals
r1_GR_num = m_GR_num$residuals
plot(r1_ast)
plot(r1_GR_ast)
plot(r1_num)
plot(r1_GR_num)
plot(r_ast)
plot(r_GR_ast)
plot(r_num)
plot(r_GR_num)
t_ast = Box.test(r_ast, lag = 24, type = "Ljung-Box", fitdf = 2)
t_GR_ast = Box.test(r_GR_ast, lag = 24, type = "Ljung-Box", fitdf = 1)
t_num = Box.test(r_num, lag = 24, type = "Ljung-Box", fitdf = 2)
t_GR_num = Box.test(r_GR_num, lag = 24, type = "Ljung-Box", fitdf = 2)
t_ast
t_GR_ast
t_num
t_GR_num
t1_ast = Box.test(r1_ast, lag = 24, type = "Ljung-Box", fitdf = 2)
t1_GR_ast = Box.test(r1_GR_ast, lag = 24, type = "Ljung-Box", fitdf = 1)
t1_num = Box.test(r1_num, lag = 24, type = "Ljung-Box", fitdf = 2)
t1_GR_num = Box.test(r1_GR_num, lag = 24, type = "Ljung-Box", fitdf = 2)
t1_ast
t1_GR_ast
t1_num
t1_GR_num
par(mfrow=c(2,2)) # plots of ACF of assumed white noise
acf(r_ast)
acf(r_GR_ast)
acf(r_num)
acf(r_GR_num)
t_ast$p.value # 0.017
t_GR_ast$p.value # 0.134
t_num$p.value # 0.287
t_GR_num$p.value # 0.003
par(mfrow=c(2,1))
acf(ast,lag=150)
acf(num,lag=150)
rm(list=ls())
x=c("readxl","TSA","forecast")
lapply(x, require, character.only = T)
data <- read_excel("0510\\bloomberg.xlsx", sheet = "total", col_types = c("skip", "numeric", "numeric"))
ast = data[1] # ast represents asset
num = data[2] # num represents number
ast = ts(ast, frequency = 12,start = 1995) # total net assets
num = ts(num, frequency = 12, start = 1995) # number of FOF funds
GR_ast = diff(log(ast)) # growth ratio of total net asset
GR_ast = ts(GR_ast, names = 'GR_ast')
GR_num = diff(log(num)) # growth ratio of number of FOF funds
GR_num = ts(GR_num, names = 'GR_num')
par(mfrow = c(2,2))
plot(ast)
plot(GR_ast)
plot(num)
plot(GR_num)
m_ast = auto.arima(ast) # ARIMA(0,2,2)
m_GR_ast = auto.arima(GR_ast) # ARIMA(0,1,1)
m_num = auto.arima(num) # ARIMA(0,2,1)(0,0,1)[12]
m_GR_num = auto.arima(GR_num) # ARIMA(1,1,1)
mm_ast = auto.arima(diff(ast, differences = 2)) # ARIMA(0,0,2) with zero mean
mm_GR_ast = auto.arima(diff(GR_ast, differences = 1)) # ARIMA(0,0,1) with zero mean
mm_num = auto.arima(diff(num, differences = 2)) # ARIMA(0,0,1)(0,0,1)[12] with zero mean
mm_GR_num = auto.arima(diff(GR_num, differences = 1)) # ARIMA(1,0,1) with zero mean
r_ast = mm_ast$residuals
r_GR_ast = mm_GR_ast$residuals
r_num = mm_num$residuals
r_GR_num = mm_GR_num$residuals
rm(list=ls())
x=c("readxl","TSA","forecast")
lapply(x, require, character.only = T)
data <- read_excel("0510\\bloomberg.xlsx", sheet = "total", col_types = c("skip", "numeric", "numeric"))
ast = data[1] # ast represents asset
num = data[2] # num represents number
ast = ts(ast, frequency = 12,start = 1995) # total net assets
num = ts(num, frequency = 12, start = 1995) # number of FOF funds
View(data)
dim(data)
ndim(data)
dim(data)
length(data)
length(data$asset)
length(data$gas)
data
dim(data)
data1 = data[:96,:]
data1 = data[0:96,:]
a1 = data$asset[0:96]
a1
dim(data)
data1 = data[:,:96]
data1 = data[:][:96]
a1 = data$asset[:]
data1 = data[0:1][:96]
data1 = data[0:1]
data
data1
data1 = data[0:2,0:96]
rm(list=ls())
x=c("readxl","TSA","forecast")
lapply(x, require, character.only = T)
rm(list=ls())
data <- read_excel("0510\\bloomberg.xlsx", sheet = "total", col_types = c("skip", "numeric", "numeric"))
ast = data[1] # ast represents asset
num = data[2] # num represents number
ast = ts(ast, frequency = 12,start = 1995) # total net assets
num = ts(num, frequency = 12, start = 1995) # number of FOF funds
plot(cars)
getwd()
library(haven)
install.packages("haven")
csdps <- read_dta("F:/data/CSDPS.dta", encoding="UTF-8")
library(haven)
csdps <- read_dta("F:/data/CSDPS.dta", encoding="UTF-8")
require(dplyr)
d1 <- filter(csdps, ! is.na(csdps$i7)) #remove observations if i7 is missing
d1 <- filter(d1, ! is.na(d1$h1)) #remove observations if h1 is missing
d1 <- filter(d1, ! is.na(d1$h2)) #remove observations if h2 is missing
d1 <- filter(d1, ! is.na(d1$a23)) #remove observations if a23 is missing
attach(d1)
i7_f <- factor(i7, ordered=TRUE) #change i7 into an ordered factor variable
table(i7_f);
require(ggplot2)
ggplot(data=d1, aes(x=h1))+geom_histogram()+
labs(title="Distribution of Degree of Satisfaction with Development",x="Degree of Satisfaction")
summary(h1)
table(i7)
ggplot(data=d1, aes(x=h1))+geom_histogram()+
labs(title="Distribution of Degree of Satisfaction with Development",x="Degree of Satisfaction")
tapply(h1, i7, mean)
tapply(h1, i7, sd)
aov1 <- aov(h1~ i7_f)
summary(aov1)
gg_qq <- function(x, distribution = "norm", ..., line.estimate = NULL, conf = 0.95,
labels = names(x)){
q.function <- eval(parse(text = paste0("q", distribution)))
d.function <- eval(parse(text = paste0("d", distribution)))
x <- na.omit(x)
ord <- order(x)
n <- length(x)
P <- ppoints(length(x))
df <- data.frame(ord.x = x[ord], z = q.function(P, ...))
if(is.null(line.estimate)){
Q.x <- quantile(df$ord.x, c(0.25, 0.75))
Q.z <- q.function(c(0.25, 0.75), ...)
b <- diff(Q.x)/diff(Q.z)
coef <- c(Q.x[1] - b * Q.z[1], b)
} else {
coef <- coef(line.estimate(ord.x ~ z))
}
zz <- qnorm(1 - (1 - conf)/2)
SE <- (coef[2]/d.function(df$z)) * sqrt(P * (1 - P)/n)
fit.value <- coef[1] + coef[2] * df$z
df$upper <- fit.value + zz * SE
df$lower <- fit.value - zz * SE
if(!is.null(labels)){
df$label <- ifelse(df$ord.x > df$upper | df$ord.x < df$lower, labels[ord],"")
}
p <- ggplot(df, aes(x=z, y=ord.x)) +
geom_point() +
geom_abline(intercept = coef[1], slope = coef[2]) +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha=0.2)
if(!is.null(labels)) p <- p + geom_text( aes(label = label))
print(p)
coef
}
d1
ndim(d1)
detach()
dim(d1)
ndim(d1)
dim(d1)
attach(d1)
table(i7_f);
18+627+2314+1471+338
table(i7)
ggplot(data=d1, aes(x=h1))+geom_histogram()+
labs(title="Distribution of Degree of Satisfaction with Development",x="Degree of Satisfaction")
tapply(h1, i7, mean)
tapply(h1, i7, sd)
aov1 <- aov(h1~ i7_f)
summary(aov1)
ggplot(data=d1, aes(x=h1))+geom_histogram()+
labs(title="Distribution of Degree of Satisfaction with Development",x="Degree of Satisfaction")
require(ggplot2)
ggplot(data=d1, aes(x=h1))+geom_histogram()+
labs(title="Distribution of Degree of Satisfaction with Development",x="Degree of Satisfaction")
h1_norm <- h1^3
table(i7_f);
require(ggplot2)
ggplot(data=d1, aes(x=h1^3))+geom_histogram()+
labs(title="Distribution of Cube of Degree of Satisfaction",x="Cube of Degree")
jarqueberaTest(h1)
jarqueberaTest(h1^3) # the result is greater than 0.05, meaning that it can be treated as a normal distribution
tapply(h1^3, i7, mean)
tapply(h1^3, i7, sd)
aov1_2 <- aov(h1^3~ i7_f) # anova1 version2
summary(aov1_2)
standresid <- rstandard(aov1_2)
aov1_2_d <- data.frame(standresid, aov1_2$fitted)
ggplot(data=aov1_2_d,aes(y=standresid, x=aov1_2.fitted))+geom_point()+
labs(title="Check for Constant Error Variance")
n=dim(d1)[1]
index=seq(1:n)
aov1_2_d <- data.frame(aov1_2_d, index)
ggplot(data=aov1_2_d, aes(y=standresid, x=index))+geom_point()+
labs(title="Check for Independence of Errors")
aov1_2 <- aov(h1^3~ i7_f) # anova1 version2
summary(aov1_2)
ggplot(data=aov1_2_d,aes(y=standresid, x=aov1_2.fitted))+geom_point()+
labs(title="Check for Constant Error Variance")
ggplot(data=aov1_2_d, aes(y=standresid, x=index))+geom_point()+
labs(title="Check for Independence of Errors")
ggplot(data=aov1_2_d, aes(y=standresid, x=index))+geom_line()
require(car)
gg_qq(aov1_2_d$standresid)#需要先运行appendix中的自定义函数
require(car)
qqPlot(aov1_2, main="QQPlot")
gg_qq(aov1_2_d$standresid)#需要先运行appendix中的自定义函数
dffits = dffits(aov1_2)
dfbetas = dfbetas(aov1_2)
cooks = cooks.distance(aov1_2)
cbind(dffits, dfbetas, cooks) # get the output here
dfbetaPlots(aov1_2)
par(mfrow=c(1,2))
plot(dffits~index)
plot(aov1_2, which=c(4))
par(mfrow=c(1,1))
dfbetaPlots(aov1_2)
par(mfrow=c(1,2))
help("dfbetaPlots")
plot(dffits~index)
plot(aov1_2, which=c(4))
par(mfrow=c(1,2))
plot(dffits~index)
plot(aov1_2, which=c(4))
help("pairwise.prop.test")
help("pairwise.t.test")
help("TukeyHSD")
getwd()
setwd("F:\\code\\R\\")
sink(file="pro2.txt")
sink()
library(haven)
csdps <- read_dta("F:/data/CSDPS.dta", encoding="UTF-8")
require(dplyr)
d1 <- filter(csdps, ! is.na(csdps$i7)) #remove observations if i7 is missing
d1 <- filter(d1, ! is.na(d1$h1)) #remove observations if h1 is missing
d1 <- filter(d1, ! is.na(d1$h2)) #remove observations if h2 is missing
d1 <- filter(d1, ! is.na(d1$a23)) #remove observations if a23 is missing
attach(d1)
i7_f <- factor(i7, ordered=TRUE) #change i7 into an ordered factor variable
table(i7_f);
help(auto.arima)
library(tseries)
help(auto.arima)
??auto.arima
getwd()
x=c("readxl","TSA","forecast", "FinTS","e1071","fGarch")
lapply(x, require, character.only = T)
getwd()
x=c("readxl","TSA","forecast", "FinTS","e1071","fGarch","MTS", "urca", "dynlm")
lapply(x, require, character.only = T)
rm(list=ls())
data2 <- read_excel("API.xlsx", sheet = "RR", col_types = c("skip", "skip", "skip", "skip", "numeric", "numeric", "skip"))
retire = ts(data2[1], frequency = 4,start = c(2007,1),names = 'retire')
data2 <- read_excel("F:\\data\\ts\\API.xlsx", sheet = "RR", col_types = c("skip", "skip", "skip", "skip", "numeric", "numeric", "skip"))
retire = ts(data2[1], frequency = 4,start = c(2007,1),names = 'retire')
fof = ts(data2[2], frequency = 4,start = c(2007,1),names = 'fof')
FinTS.stats(retire)
FinTS.stats(fof)
GR_retire = diff(log(retire))
GR_fof = diff(log(fof))
par(mfrow=c(2,1))
ts.plot(retire, fof*10, col = rainbow(8), gpars = list(xlab="year", ylab="number" ))
title("Time Trends of Retire and FOF in Last 10 Years")
legend(x=2007, y= 9500, c("Retire"), text.col=rainbow(8)[1], bty="n")
legend(x=2007, y= 7500, c("FOF * 10"), text.col=rainbow(8)[2], bty="n")
ts.plot(GR_retire, GR_fof, col=rainbow(8))
title("Growth Rates of Retire and FOF in Last 10 years")
legend(x=2010, y= -0.05, c("the Growth Rate of Retire"), text.col=rainbow(8)[1], bty="n")
legend(x=2007, y= 0.22, c("the Growth Rate of FOF"), text.col=rainbow(8)[2], bty="n")
legend(x=2007, y= 0.22, c("the Growth Rate of FOF"), text.col=rainbow(8)[2], bty="n")
rm(list=ls())
data2 <- read_excel("F:\\data\\ts\\API.xlsx", sheet = "RR", col_types = c("skip", "skip", "skip", "skip", "numeric", "numeric", "skip"))
retire = ts(data2[1], frequency = 4,start = c(2007,1),names = 'retire')
fof = ts(data2[2], frequency = 4,start = c(2007,1),names = 'fof')
FinTS.stats(retire)
FinTS.stats(fof)
GR_retire = diff(log(retire))
GR_fof = diff(log(fof))
ts.plot(retire, fof*10, col = rainbow(8), gpars = list(xlab="year", ylab="number" ))
title("Time Trends of Retire and FOF in Last 10 Years")
legend(x=2007, y= 9500, c("Retire"), text.col=rainbow(8)[1], bty="n")
legend(x=2007, y= 7500, c("FOF * 10"), text.col=rainbow(8)[2], bty="n")
ts.plot(GR_retire, GR_fof, col=rainbow(8))
title("Growth Rates of Retire and FOF in Last 10 years")
legend(x=2010, y= -0.05, c("the Growth Rate of Retire"), text.col=rainbow(8)[1], bty="n")
legend(x=2007, y= 0.22, c("the Growth Rate of FOF"), text.col=rainbow(8)[2], bty="n")
ts.plot(retire, fof*10, col = rainbow(8), gpars = list(xlab="Year", ylab="Number" ))
title("Time Trends of Retire and FOF in Last 10 Years")
legend(x=2007, y= 9500, c("Retire"), text.col=rainbow(8)[1], bty="n")
legend(x=2007, y= 7500, c("FOF * 10"), text.col=rainbow(8)[2], bty="n")
ts.plot(GR_retire, GR_fof, col=rainbow(8), gpars = list(xlab="Year", ylab="Growth Rate")
title("Growth Rates of Retire and FOF in Last 10 years")
legend(x=2010, y= -0.05, c("the Growth Rate of Retire"), text.col=rainbow(8)[1], bty="n")
legend(x=2007, y= 0.22, c("the Growth Rate of FOF"), text.col=rainbow(8)[2], bty="n")
ts.plot(GR_retire, GR_fof, col=rainbow(8), gpars = list(xlab="Year", ylab="Growth Rate")
title("Growth Rates of Retire and FOF in Last 10 years")
legend(x=2010, y= -0.05, c("the Growth Rate of Retire"), text.col=rainbow(8)[1], bty="n")
legend(x=2007, y= 0.22, c("the Growth Rate of FOF"), text.col=rainbow(8)[2], bty="n")
ts.plot(GR_retire, GR_fof, col=rainbow(8), gpars = list(xlab="Year", ylab="Growth Rate"))
title("Growth Rates of Retire and FOF in Last 10 years")
legend(x=2010, y= -0.05, c("the Growth Rate of Retire"), text.col=rainbow(8)[1], bty="n")
legend(x=2007, y= 0.22, c("the Growth Rate of FOF"), text.col=rainbow(8)[2], bty="n")
summary(ur.df(retire, lags = 3)) # 不拒绝
summary(ur.kpss(retire)) #拒绝
summary(ur.pp(retire)) # 不拒绝 （临界值附近）
summary(ur.df(retire, lags = 3)) # 不拒绝
summary(ur.kpss(retire)) #拒绝
summary(ur.pp(retire)) # 不拒绝 （临界值附近）
summary(ur.kpss(retire)) #拒绝
summary(ur.df(diff(retire),lags=3)) #拒绝
summary(ur.kpss(diff(retire))) #不拒绝
summary(ur.pp(diff(retire))) #小于临界值
help(lm)
'''
#### 说明
本部分对fof和retire进行协整分析。
1. **平稳性**。fof与retire都是非平稳的，取对数后仍然非平稳。但它们的增长率都是平稳序列（对数再差分）
2. **协整建模1**。 $fof$**~ **$retire$ 。结果残差是平稳的，说明2个I(1)的过程结果得到了I(0)的过程。协整向量为(1, -0.15)。同时建立ECM方程。
3. **协整建模2**。$log(fof)$**~ **$log(retire)$ 。结果残差是平稳的。同上。协整向量为(1, -1.9)。同时建立ECM方程。
4. **协整建模3**。使用*Lecture11* 中的$ca.jo()$函数建模。结果：
1. 对fof与retire分析时不存在协整关系。
2. 对log(fof)与log(retire)分析时也不存在协整关系。
3. 对GR_fof与GR_retire分析时存在协整关系。但是这个是平稳序列。
'''
##### 导入数据####
getwd()
x=c("readxl","TSA","forecast", "FinTS","e1071","fGarch","MTS", "urca", "dynlm")
lapply(x, require, character.only = T)
rm(list=ls())
data2 <- read_excel("F:\\data\\ts\\API.xlsx", sheet = "RR", col_types = c("skip", "skip", "skip", "skip", "numeric", "numeric", "skip"))
# 提取协整分析的数据，养老金和fof数量，从2007年开始
retire = ts(data2[1], frequency = 4,start = c(2007,1),names = 'retire')
fof = ts(data2[2], frequency = 4,start = c(2007,1),names = 'fof')
FinTS.stats(retire)
FinTS.stats(fof)
####描述统计####
# 获得增长率
GR_retire = diff(log(retire))
GR_fof = diff(log(fof))
par(mfrow=c(2,1))
# 基数的协整关系比较复杂，不容易查看
ts.plot(retire, fof*10, col = rainbow(8), gpars = list(xlab="Year", ylab="Number" ))
title("Time Trends of Retire and FOF in Last 10 Years")
# legend(x=2007,y=9000, c("Retire","FOF*10"), text.col = rainbow(8), bty="n")
legend(x=2007, y= 9500, c("Retire"), text.col=rainbow(8)[1], bty="n")
legend(x=2007, y= 7500, c("FOF * 10"), text.col=rainbow(8)[2], bty="n")
# 增长率之间趋势相同，可以看出有协整关系
ts.plot(GR_retire, GR_fof, col=rainbow(8), gpars = list(xlab="Year", ylab="Growth Rate"))
title("Growth Rates of Retire and FOF in Last 10 years")
legend(x=2010, y= -0.05, c("the Growth Rate of Retire"), text.col=rainbow(8)[1], bty="n")
legend(x=2007, y= 0.22, c("the Growth Rate of FOF"), text.col=rainbow(8)[2], bty="n")
# ts.plot(diff(fof), diff(retire),col=rainbow(8))
####单位根检验####
# df-test/pp-test的原假设是非平稳， kpss-test的原假设是平稳
summary(ur.df(retire, lags = 3)) # 不拒绝
# adf.test(retire)
summary(ur.kpss(retire)) #拒绝
summary(ur.pp(retire)) # 不拒绝 （临界值附近）
summary(ur.df(diff(retire),lags=3)) #拒绝
summary(ur.kpss(diff(retire))) #不拒绝
summary(ur.pp(diff(retire))) #小于临界值
m1 = lm(fof~retire)
r1 <- m1$residuals
par(mfrow=c(1,1))
plot(r1, xlab = 'time (seasonal)')
print(summary(m1))
AIC(m1)
BIC(m1)
summary(ur.df(r1)) #拒绝
summary(ur.kpss(r1)) #不拒绝
summary(ur.pp(r1)) #不拒绝
