x1 <- 0:100 #vector
x2 <- x1 * 2 * pi/100 #another vector
y1 <- sin(x2) # use function to generate vector
plot(x2, y1, type="l")
abline(h=0, lwd=2)
abline(v=(0:4)/2*pi, lty=3, col="gray")
y2 <- cos(x2)
marks <-c(10, 6, 4, 7, 8)
lines(x2, y2, lty=2, col="green")
ls()
rm(list=ls())
ls()
Example1=read.csv("0309\\data\\Example1.csv", header=T, sep=',')
summary(Example1)
cor(Example1)
plot(TV_sales~Working_month, data=Example1)
getwd()
setwd("0309\\data")
plot(TV_sales~Working_month, data=Example1)
lm1=lm(TV_sales~Working_month,data=Example1)
summary(lm1)
paste(c("ab","cd"))
paste(c("a","b"),c("c","d"))
type(lm1)
typeof(lm1)
typeof(c("ab","cd"))
typeof(paste(c("a","b"),c("c","d")))
lm1$coefficients
View(Example1)
paste(c("x", 1:3))
paste("x",1:3)
paste("x",1:3,sep="~")
lm1$effects
lm1$fitted.values
lm1.xlevels
lm1$xlevels
?lm
?paste
paste("ab","cd",collapse = 1)
paste("ab","cd",collapse="~")
paste("ab","cd",collapse="&&")
paste("ab","cd",collapse="")
standresid=rstandard(lm1)
?lm
?complex
standresid=rstandard(lm1)
summary(standresid)
devtools::install_github("rstudio/addinexamples", type = "source")
plot(standresid~Working_month, data=Example1, main="check for the linearity")
Working_month2=Example1$Working_month^2
lm2=lm(TV_sales~Working_month+Working_month2,data=Example1)
summary(lm2)
anova(lm1,lm2)
standresid=rstandard(lm2)
plot(standresid~lm2$fitted, data=Example1, main="New Model:Constant Error Variance")
library(qqplot)
library(QQplot)
library(car)
install.packages("car")
install.packages("car")
version
ncvTest(lm2)
plot(standresid~Working_month, data=Example1, main="New Model: Check for linearity")
dim(Example1)
dim(Example1)[2]
dim(Example1)[3]
ff<-matrix(1:20,nrow=4,ncol=5)
ff
dim(ff)
dim(ff)[1]
dim(ff)[2]
dim(Example1)
rm(ff)
?complex
library(car)
ncvTest(lm2)
library(TSA)
durbinWatsonTest(lm2)
library(lmtest)
dwtest(lm2)
x <- c(1:100)
x
typeof(x)
y = list(x)
y
typeof(y)
lm(y,x)
lm(y~x)
typeof(c(1,2))
typeof(c("a","b"))
x<-1:100
y<list(x)
x[1]
y[1]
dim(x)
dim(y)
x1 <- ("a","b","c")
x1 <- c("a","b","c")
ncvTest(lm2)
?ncvTest
plot(standresid~Working_month, data=Example1, main="New Model: Check for linearity")
?D-Wtest
?dwtest
durbinWatsonTest(lm2)
dwtest(lm2)
library(car)
durbin.watson(lm2)
?durbinWatsonTest
library(TSA)
?durbin.watson
?durbinWatsonTest
?pbkrtest
??pbkrtest
library(pbkrtest)
dwtest(lm2)
qqPlot(lm2,main="QQ Plot")
dwtest(lm2)
dwtest(lm2)
durbinWatsonTest(lm2)
durbinWatsonTest(lm2)
durbinWatsonTest(lm2) #p-value is generate by a random series, so it may change every time
(lm2)
??dfbetas
dffits=dffits(lm2)
cooks=cooks.distance(lm2)
dfbetas=dfbetas(lm2)
cbind(dfbetas,dffits,cooks)
dfbetasPlots(lm2)
plot(dffits~index)
plot(lm2, which=c(4))
Example2=read.csv("Example2.csv", header=T, sep=',')
Example2
Example2=read.csv("Example2.csv", head
Example2=read.csv("Example2.csv", head
Example2=read.csv("Example2.csv", head
Example2=read.csv("Example2.csv", header=T, sep=',')
Example2
getwd()
dir()
Example2=read.csv("Example2.csv", header=T, sep=',')
Example2
summary(Example2)
cor(Example2)
plot(Carbohydrate~Age, data=Example2)
plot(Carbohydrate~Weight, data=Example2)
plot(Carbohydrate~Protein, data=Example2)
pairs(Example2)
lm1=lm(Carbohydrate~Age+Weight+Protein,data=Example2)
summary(lm1)
lm2=lm(Carbohydrate~Weight+Protein,data=Example2)
summary(lm2)
standresid=rstandard(lm2)
plot(standresid~lm2$fitted, data=Example2)
ncvTest(lm1)
par(mfrow=c(1,2))
plot(standresid~Weight, data=Example2)
plot(standresid~Protein, data=Example2)
index=seq(1:n)
plot(standresid~index)
durbinWatsonTest(lm1)
qqPlot(lm2,main="QQ Plot")
library(car)
round(vif(lm2),2)
rm(ls())
rm(ls())
ls()
rm(c(ls()))
rm(list=ls())
Example4=read.csv("Example4.csv", header=T, sep=',')
Example4
names(Example4)
tapply(Weight,Factory, mean)
attach(Example4)
tapply(Weight,Factory, mean)
tapply(Weight,Factory, sd)
lm1=aov(Weight ~ as.factor(Factory), data=Example4)
?avo
?aov
summary(lm1)
standresid=rstandard(lm1)
plot(standresid~lm1$fitted, data=Example4)
lm2=lm(Weight ~ Factory, data=Example4)
ncvTest(lm2)
n=dim(Example4)[1]
index=seq(1:n)
plot(standresid~index)
durbinWatsonTest(lm1)
qqPlot(lm1,main="QQ Plot")
?jbtest
??jbtest
pairwise.t.test(Weight, Factory, p.adj = "none", data=Example4)
pairwise.t.test(Weight, Factory, p.adj = "bonf", data=Example4)
TukeyHSD(lm1)
?pairwise.t.test
?Tukey
?TukeyHSD
a<-pairwise.t.test(Weight, Factory, p.adj = "none", data=Example4)
